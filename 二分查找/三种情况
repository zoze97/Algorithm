// 直接查找
int binarySearch(vector<int> nums, target) {
  int left = 0, right = nums.size() - 1;
  while (left <= right) {
    int mid = left + (right - left) / 2;
    if ( nums[mid] == target ) {
      return mid;
    } else if ( nums[mid] < target ) {
      left = mid + 1;
    } else if ( nums[mid] > target ) {
      right = mid - 1;
    }
  }
  // 没有找到
  return -1；
}

// 寻找左边界
int searchLeftBoard() {
  int left = 0, right = nums.size() - 1;
  while (left <= right) {
    int mid = left + (right - left) / 2;
    if ( nums[mid] < target ) {
      left = mid + 1;
    } else if ( nums[mid] >= target ) {
      right = mid - 1;
    }
  }

  if( left < 0 || left >= nums.size()) {
    return -1;
  }
  return nums[left] == target ? left : -1;
}


// 寻找右边界
int left = 0, right = nums.size() - 1;
  while (left <= right) {
    int mid = left + (right - left) / 2;
    if ( nums[mid] <= target ) {
      left = mid + 1;
    } else if ( nums[mid] > target ) {
      right = mid - 1;
    }
  }

  if( right < 0 || right >= nums.size()) {
    return -1;
  }
  return nums[right] == target ? right : -1;
